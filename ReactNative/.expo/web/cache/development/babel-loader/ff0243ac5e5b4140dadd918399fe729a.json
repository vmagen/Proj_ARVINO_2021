{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\vmage\\\\OneDrive\\\\Ruppin\\\\\\u05E9\\u05E0\\u05D4 \\u05D2\\\\\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8 \\u05D1\\\\Proj_July_RN\\\\FunctionalComponents\\\\FCAvatarScrollView.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Avatar, Text } from 'react-native-elements';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { AuthContext } from \"../Componenets/AuthContext\";\nimport helpers from \"../helpers/helperFunctions\";\nimport styleSheet from \"../Pages/PageStyle\";\nimport uuid from 'react-native-uuid';\nexport default function FCAvatarScrollView() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      avatars = _useState2[0],\n      setAvatars = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isDataFecthed = _useState4[0],\n      setDataFetched = _useState4[1];\n\n  var _useContext = useContext(AuthContext),\n      user = _useContext.user,\n      authenticated = _useContext.authenticated;\n\n  var isMounted = true;\n  useEffect(function () {\n    if (authenticated) {\n      getAvatars();\n    }\n  }, [authenticated]);\n\n  function getAvatars() {\n    fetch(helpers.getApi() + '/User/getProximity?email=' + user.email, {\n      method: 'GET',\n      headers: new Headers({\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Accept': 'application/json; charset=UTF-8'\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setAvatars(result);\n      setDataFetched(true);\n    }, function (error) {\n      console.log(\"err post=\", error);\n    });\n  }\n\n  if (authenticated && isDataFecthed != null) {\n    return React.createElement(ScrollView, {\n      horizontal: true,\n      pagingEnabled: true,\n      style: styleSheet.scrollView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, avatars.map(function (item) {\n      return React.createElement(View, {\n        key: uuid.v4(),\n        style: {\n          alignItems: 'center',\n          padding: 10\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, React.createElement(Avatar, {\n        rounded: true,\n        size: \"large\",\n        containerStyle: {\n          borderWidth: 4,\n          shadowColor: \"#000\",\n          shadowOffset: {\n            width: 0,\n            height: 2\n          },\n          shadowOpacity: 0.27,\n          shadowRadius: 4.65,\n          elevation: 6,\n          borderColor: helpers.ReturnRandomData(helpers.ReturnColorPallete())\n        },\n        source: {\n          uri: item.picture\n        },\n        icon: {\n          name: 'user',\n          type: 'font-awesome'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      }), React.createElement(Text, {\n        style: [styleSheet.textInput],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, item.Name));\n    }));\n  } else {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/vmage/OneDrive/Ruppin/שנה ג/סמסטר ב/Proj_July_RN/FunctionalComponents/FCAvatarScrollView.js"],"names":["React","useState","useContext","useEffect","Avatar","Text","AuthContext","helpers","styleSheet","uuid","FCAvatarScrollView","avatars","setAvatars","isDataFecthed","setDataFetched","user","authenticated","isMounted","getAvatars","fetch","getApi","email","method","headers","Headers","then","res","json","result","error","console","log","scrollView","map","item","v4","alignItems","padding","borderWidth","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","borderColor","ReturnRandomData","ReturnColorPallete","uri","picture","name","type","textInput","Name"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\r\nimport { Avatar, Text } from 'react-native-elements';\r\nimport { View, ScrollView, ActivityIndicator } from 'react-native';\r\nimport { AuthContext } from '../Componenets/AuthContext';\r\nimport helpers from '../helpers/helperFunctions';\r\nimport styleSheet from '../Pages/PageStyle';\r\nimport uuid from 'react-native-uuid';\r\n\r\nexport default function FCAvatarScrollView() {\r\n  const [avatars, setAvatars] = useState([]);\r\n  const [isDataFecthed, setDataFetched] = useState(false);\r\n  const { user, authenticated } = useContext(AuthContext);\r\n  let isMounted = true;\r\n\r\n  useEffect(() => {\r\n    if (authenticated) {\r\n      getAvatars();\r\n    }\r\n  }, [authenticated]);\r\n\r\n  function getAvatars() {\r\n    fetch(helpers.getApi() + '/User/getProximity?email=' + user.email,\r\n      {\r\n        method: 'GET',\r\n        headers: new Headers({\r\n          'Content-Type': 'application/json; charset=UTF-8',\r\n          'Accept': 'application/json; charset=UTF-8',\r\n        })\r\n      })\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(\r\n        (result) => {\r\n\r\n          setAvatars(result);\r\n          setDataFetched(true);\r\n\r\n        },\r\n        (error) => {\r\n          console.log(\"err post=\", error);\r\n        });\r\n  }\r\n\r\n  if (authenticated && isDataFecthed != null) {\r\n    return (\r\n      <ScrollView\r\n        horizontal={true}\r\n        pagingEnabled={true}\r\n        style={styleSheet.scrollView}>\r\n        {avatars.map(item => (\r\n          <View key={uuid.v4()} style={{ alignItems: 'center', padding: 10 }}>\r\n            <Avatar\r\n              rounded={true}\r\n              size=\"large\"\r\n              containerStyle={{\r\n                borderWidth: 4,\r\n                shadowColor: \"#000\",\r\n                shadowOffset: {\r\n                  width: 0,\r\n                  height: 2,\r\n                },\r\n                shadowOpacity: 0.27,\r\n                shadowRadius: 4.65,\r\n                elevation: 6,\r\n                borderColor: helpers.ReturnRandomData(helpers.ReturnColorPallete())\r\n              }}\r\n              source={{\r\n                uri:\r\n                  item.picture,\r\n              }}\r\n              icon={{ name: 'user', type: 'font-awesome' }}\r\n            />\r\n            <Text style={[styleSheet.textInput]}>{item.Name}</Text>\r\n          </View>\r\n\r\n        ))}\r\n      </ScrollView>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <View />\r\n    )\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}