{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\vmage\\\\OneDrive\\\\Ruppin\\\\\\u05E9\\u05E0\\u05D4 \\u05D2\\\\\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8 \\u05D1\\\\Proj_July_RN\\\\FunctionalComponents\\\\FCGroups.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { Text, Button } from 'react-native-elements';\nimport FCHeader from \"./FCHeader\";\nimport FCSearch from \"./FCSearch\";\nimport styleSheet from \"../Pages/PageStyle\";\nimport messages from \"../helpers/messages.json\";\nimport FCBubbles from \"./FCBubbles\";\nimport helpers from \"../helpers/helperFunctions\";\nimport { AuthContext } from \"../Componenets/AuthContext\";\nimport { useNavigation } from '@react-navigation/native';\n\nfunction FCGroups() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      groups = _useState2[0],\n      setGroups = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loaded = _useState4[0],\n      setloaded = _useState4[1];\n\n  var _useContext = useContext(AuthContext),\n      authenticated = _useContext.authenticated,\n      user = _useContext.user;\n\n  var navigation = useNavigation();\n  useEffect(function () {\n    setloaded(false);\n    getGroups();\n  }, []);\n\n  function getGroups() {\n    fetch(helpers.getApi() + 'group', {\n      method: 'GET',\n      headers: new Headers({\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Accept': 'application/json; charset=UTF-8'\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setGroups(result);\n      setloaded(true);\n    }, function (error) {\n      console.log(\"err post=\", error);\n    });\n  }\n\n  var handleSubmitNewGroup = function handleSubmitNewGroup() {\n    return _regeneratorRuntime.async(function handleSubmitNewGroup$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            navigation.navigate('Login', {\n              screen: 'NewGroup'\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (loaded) {\n    return React.createElement(View, {\n      style: styleSheet.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, React.createElement(FCHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }), React.createElement(View, {\n      style: {\n        flexDirection: 'row-reverse',\n        justifyContent: 'flex-start'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      h4: true,\n      style: [styleSheet.h4Text, {\n        marginTop: 10\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, authenticated ? messages.myGroups : messages.groups), authenticated && React.createElement(Button, {\n      title: messages.createNewGroup,\n      buttonStyle: [styleSheet.button, {\n        marginRight: 70\n      }],\n      onPress: handleSubmitNewGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }\n    })), React.createElement(FCSearch, {\n      placeholder: messages.searchInGroups,\n      type: messages.groups,\n      data: groups,\n      loaded: loaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }), React.createElement(FCBubbles, {\n      myGroups: groups,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return React.createElement(ActivityIndicator, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    });\n  }\n}\n\nexport default FCGroups;","map":{"version":3,"sources":["C:/Users/vmage/OneDrive/Ruppin/שנה ג/סמסטר ב/Proj_July_RN/FunctionalComponents/FCGroups.js"],"names":["React","useState","useEffect","useContext","Text","Button","FCHeader","FCSearch","styleSheet","messages","FCBubbles","helpers","AuthContext","useNavigation","FCGroups","groups","setGroups","loaded","setloaded","authenticated","user","navigation","getGroups","fetch","getApi","method","headers","Headers","then","res","json","result","error","console","log","handleSubmitNewGroup","navigate","screen","container","flexDirection","justifyContent","h4Text","marginTop","myGroups","createNewGroup","button","marginRight","searchInGroups"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\r\nimport { SafeAreaView, ActivityIndicator, View, FlatList, StyleSheet, StatusBar } from 'react-native';\r\nimport { Text, Button } from 'react-native-elements';\r\nimport FCHeader from './FCHeader';\r\nimport FCSearch from './FCSearch';\r\nimport styleSheet from '../Pages/PageStyle';\r\nimport messages from '../helpers/messages.json';\r\nimport FCBubbles from './FCBubbles';\r\nimport helpers from '../helpers/helperFunctions';\r\nimport { AuthContext } from '../Componenets/AuthContext';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\n\r\nfunction FCGroups() {\r\n  const [groups, setGroups] = useState([]);\r\n  const [loaded, setloaded] = useState(false);\r\n  const { authenticated, user } = useContext(AuthContext);\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    setloaded(false);\r\n    getGroups();\r\n  }, [])\r\n\r\n  function getGroups() {\r\n    fetch(helpers.getApi() + 'group',\r\n      {\r\n        method: 'GET',\r\n        headers: new Headers({\r\n          'Content-Type': 'application/json; charset=UTF-8',\r\n          'Accept': 'application/json; charset=UTF-8',\r\n        })\r\n      })\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(\r\n        (result) => {\r\n          setGroups(result);\r\n          setloaded(true);\r\n        },\r\n        (error) => {\r\n          console.log(\"err post=\", error);\r\n        });\r\n  }\r\n\r\n  const handleSubmitNewGroup = async () => {\r\n    navigation.navigate('Login', {\r\n      screen: 'NewGroup'\r\n    })\r\n  }\r\n\r\n  if (loaded) {\r\n    return (\r\n      <View style={styleSheet.container}>\r\n        <FCHeader />\r\n        <View style={{ flexDirection: 'row-reverse', justifyContent: 'flex-start' }}>\r\n          <Text h4 style={[styleSheet.h4Text, { marginTop: 10 }]}>{authenticated ? messages.myGroups : messages.groups}</Text>\r\n          {authenticated && <Button\r\n            title={messages.createNewGroup}\r\n            buttonStyle={[styleSheet.button, { marginRight: 70 }]}\r\n            onPress={handleSubmitNewGroup}\r\n          />}\r\n        </View>\r\n        <FCSearch placeholder={messages.searchInGroups} type={messages.groups} data={groups} loaded={loaded} />\r\n        <FCBubbles myGroups={groups} />\r\n      </View>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <ActivityIndicator size='large' />\r\n    )\r\n  }\r\n}\r\n\r\nexport default FCGroups;"]},"metadata":{},"sourceType":"module"}